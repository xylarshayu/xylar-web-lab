---
import type { HTMLAttributes } from 'astro/types';
import DownArrow from "~icons/material-symbols/arrow-drop-down";
/* â–¾ */


export interface Props extends HTMLAttributes<'div'> {
}

const frameworks = ['html', 'vue', 'react', 'lit', 'solid', 'svelte'];

const { class:className, ...attrs } = Astro.props as Props;

---

<button type="button" class:list={['framework-button' , className]}>
  {frameworks.map((i) => (
    <span class='framework-icon' title={i}>
      <img src={"/assets/icons/file-type-" + i + ".svg"} alt={i + '-icon'} loading="lazy" title={i} />
    </span>
  ))}
  <span class="button-text">Frameworks&nbsp;</span><DownArrow />
</button>

<dialog id="framework-select">
  {frameworks.map((i) => (
    <div class='framework-option' title={i}>
      <span>
        {i}
      </span>
      <img src={"/assets/icons/file-type-" + i + ".svg"} alt={i + '-icon'} loading="lazy" height="24" width="24" title={i} />
    </div>
  ))}
</dialog>

<script>
  import {frameworks, toggleFramework, FrameworkKey, FrameworksMap} from '../store/appstate';

  const FrameworkSelect = document.getElementById("framework-select") as HTMLDialogElement;
  const FrameworkButton = document.querySelector(".framework-button");

  FrameworkButton?.addEventListener("click", () => FrameworkSelect.showModal());
  FrameworkSelect.addEventListener("click", (e) => {
    if (e.target === FrameworkSelect) FrameworkSelect.close();
  });

  const FrameworkToggles = document.querySelectorAll('.framework-option');
  FrameworkToggles.forEach(option => {
    let framework = option.getAttribute('title')! as FrameworkKey;
    option.classList.toggle('framework-toggled', JSON.parse(frameworks.get()[framework]));
    option.addEventListener('click', () => toggleFramework(framework));
  });

  const FrameworkIcons = document.querySelectorAll(".framework-icon");
  FrameworkIcons.forEach(option => {
    let framework = option.getAttribute('title')! as FrameworkKey;
    option.classList.toggle('framework-toggled', JSON.parse(frameworks.get()[framework]));
  });

  frameworks.listen((value: FrameworksMap, changed: FrameworkKey) => {
    console.log('hi');
    let toChange = [
      document.querySelector(`.framework-icon[title=${changed}]`),
      document.querySelector(`.framework-option[title=${changed}]`)
    ];
    toChange.forEach(el => el!.classList.toggle('framework-toggled', JSON.parse(value[changed])));
  });


</script>

<style>

  .framework-button {
    display: inline-flex;
    background: none;
    border: none;
    align-items: center;
    padding: 0.375rem;
    outline: var(--pen-color) 2px solid;
    color: var(--pen-color);
    border-radius: 999px;
    cursor: pointer;
  }

  .framework-button .button-text {
    display: none;
  }

  .framework-button .framework-icon {
    display: none;
  }

/*   :global(body[html]) .framework-button .framework-icon[title="html"],
  :global(body[vue]) .framework-button .framework-icon[title="vue"],
  :global(body[react]) .framework-button .framework-icon[title="react"],
  :global(body[astro]) .framework-button .framework-icon[title="astro"],
  :global(body[solid]) .framework-button .framework-icon[title="solid"],
  :global(body[svelte]) .framework-button .framework-icon[title="svelte"] */
  .framework-icon.framework-toggled
  {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    height: 1.5rem;
    width: 1.5rem;
    border-radius: 0.75rem;
    background: var(--primary-swatch-100);
    margin-right: 0.5rem;
    box-shadow: var(--shadow-xl);
  }

  .framework-button .framework-icon img {
    height: 80%;
    width: auto;
    /* animation: skeleton-loader 1s linear infinite alternate; */
  }

  #framework-select {
    border: none;
    background: none;
    padding: 0;
    outline: 2px solid var(--faint-border-color);
    border-radius: 3px;
    box-shadow: var(--shadow-xl);
    margin: auto;
    width: 100svw;
  }

  #framework-select::backdrop {
    background: rgba(0, 0, 0, 0.8);
  }

  #framework-select .framework-option {
    /* background-color: var(--screen-color); */
    background-color: var(--not-selected-color);
    font-size: var(--text-xl);
    color: var(--pen-color);
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: all 0.1s ease-in-out;
    cursor: pointer;
  }

  #framework-select .framework-option:hover {
    filter: brightness(1.1);
  }

/*   :global(body:not([html])) .framework-option[title="html"],
  :global(body:not([vue])) .framework-option[title="vue"],
  :global(body:not([react])) .framework-option[title="react"],
  :global(body:not([astro])) .framework-option[title="astro"],
  :global(body:not([solid])) .framework-option[title="solid"],
  :global(body:not([svelte])) .framework-option[title="svelte"] */
  .framework-option.framework-toggled {
    /* background-color: var(--not-selected-color) !important; */
    background-color: var(--screen-color) !important;
    transition: all 0.1s ease-in-out;
  }

  .framework-option.framework-toggled * {
    opacity: 1;
  }

/*   :global(body:not([html])) .framework-option[title="html"] *,
  :global(body:not([vue])) .framework-option[title="vue"] *,
  :global(body:not([react])) .framework-option[title="react"] *,
  :global(body:not([astro])) .framework-option[title="astro"] *,
  :global(body:not([solid])) .framework-option[title="solid"] *,
  :global(body:not([svelte])) .framework-option[title="svelte"] * */
  .framework-option * {
    opacity: 0.5;
  }

  #framework-select .framework-option > span {
    text-transform: capitalize;
  }

  #framework-select .framework-option:not(:last-child) {
    border-bottom: 2px solid var(--faint-border-color);
  }

</style>